/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react'
import { TextField, Button, Link as MUILink } from '@mui/material'
import { styled } from '@mui/material/styles'
import useShoppingFooter1 from 'components/ShoppingFooter1/useShoppingFooter1'

const Property1Desktop = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  backgroundColor: theme.palette['Background']['Background'],
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding:
    data.currentVariant === 'ScreenTablet'
      ? `36px 0px 10px 0px`
      : data.currentVariant === 'ScreenMobile'
      ? `20px 0px 10px 0px`
      : `30px 0px 10px 0px`,
  boxSizing: `border-box`,
  height: 'auto',
}))

const Top = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: data.currentVariant === 'ScreenMobile' ? `0px 20px` : `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
}))

const Group6 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: data.currentVariant === 'ScreenMobile' ? `column` : `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding:
    data.currentVariant === 'ScreenTablet'
      ? `0px 40px`
      : data.currentVariant === 'ScreenMobile'
      ? `0px`
      : `0px 100px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
}))

const FooterTxt = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: data.currentVariant === 'ScreenMobile' ? `column` : `row`,
  justifyContent:
    data.currentVariant === 'ScreenMobile' ? `flex-start` : `space-between`,
  alignItems: data.currentVariant === 'ScreenMobile' ? `flex-start` : `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: data.currentVariant === 'ScreenMobile' ? 'unset' : `1`,
  margin: `0px`,
  overflow: `hidden`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}))

const SqueezLogo = styled('img')({
  height: `48px`,
  width: `119.64px`,
  margin: `0px`,
})

const Search = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: data.currentVariant === 'ScreenMobile' ? `10px 0px` : `10px`,
  boxSizing: `border-box`,
  margin: data.currentVariant === 'ScreenMobile' ? `15px 0px 0px 0px` : `0px`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}))

const TextFieldOutlined = styled(TextField, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  width: `220px`,
  margin: `0px`,
  flex: data.currentVariant === 'ScreenMobile' ? `1` : 'unset',
}))

const ButtonContained = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `0px 0px 0px 10px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Font - Medium'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Medium'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Medium'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Medium'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Medium'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Medium'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Medium'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Medium'].textTransform,
}))

const Top1 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin:
    data.currentVariant === 'ScreenMobile'
      ? `20px 0px 0px 0px`
      : `30px 0px 0px 0px`,
  overflow: `hidden`,
}))

const Group61 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding:
    data.currentVariant === 'ScreenTablet'
      ? `0px 40px`
      : data.currentVariant === 'ScreenMobile'
      ? `0px 20px`
      : `0px 100px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
}))

const FooterTxt1 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: data.currentVariant === 'ScreenMobile' ? `column` : `row`,
  justifyContent:
    data.currentVariant === 'ScreenMobile' ? `flex-start` : `space-between`,
  alignItems:
    data.currentVariant === 'ScreenMobile' ? `flex-start` : `flex-end`,
  padding: data.currentVariant === 'ScreenMobile' ? `8px 0px` : `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
  overflow: `hidden`,
}))

const Leftside = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 0px 18px 0px`,
  boxSizing: `border-box`,
  margin: `0px`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}))

const Mission = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  width: `314px`,
  margin: `0px`,
}))

const Statement = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Body 3'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 3'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 3'].fontWeight,
  fontSize: theme.typography['Typography']['Body 3'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 3'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 3'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 3'].textDecoration,
  textTransform: theme.typography['Typography']['Body 3'].textTransform,
  width: `314px`,
  margin: `20px 0px 0px 0px`,
}))

const Btns = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: data.currentVariant === 'ScreenMobile' ? `column` : `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `20px 0px 0px 0px`,
  alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
}))

const ButtonText = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin: `0px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Small'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Small'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Small'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Small'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Small'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Small'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Small'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Small'].textTransform,
}))

const ButtonText1 = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin:
    data.currentVariant === 'ScreenMobile'
      ? `10px 0px 0px 0px`
      : `0px 0px 0px 10px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Small'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Small'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Small'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Small'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Small'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Small'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Small'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Small'].textTransform,
}))

const ButtonText2 = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin:
    data.currentVariant === 'ScreenMobile'
      ? `10px 0px 0px 0px`
      : `0px 0px 0px 10px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Small'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Small'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Small'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Small'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Small'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Small'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Small'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Small'].textTransform,
}))

const ButtonText3 = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin:
    data.currentVariant === 'ScreenMobile'
      ? `10px 0px 0px 0px`
      : `0px 0px 0px 10px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Small'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Small'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Small'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Small'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Small'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Small'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Small'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Small'].textTransform,
}))

const ButtonText4 = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin:
    data.currentVariant === 'ScreenMobile'
      ? `10px 0px 0px 0px`
      : `0px 0px 0px 10px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Components']['Button Font - Small'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Small'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Small'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Small'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Small'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Small'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Small'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Small'].textTransform,
}))

const SocialIcons = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding:
    data.currentVariant === 'ScreenMobile'
      ? `0px 0px 10px 10px`
      : `0px 10px 20px 0px`,
  boxSizing: `border-box`,
  margin: data.currentVariant === 'ScreenMobile' ? `18px 0px 0px 0px` : `0px`,
}))

const Vector = styled('img')({
  height: `25.14px`,
  width: `25.14px`,
  margin: `0px`,
})

const Vector1 = styled('img')({
  height: `25.13px`,
  width: `25.13px`,
  margin: `0px 0px 0px 12px`,
})

const Vector2 = styled('img')({
  height: `21.87px`,
  width: `26.92px`,
  margin: `0px 0px 0px 12px`,
})

const Vector3 = styled('img')({
  height: `25.13px`,
  width: `21.99px`,
  margin: `0px 0px 0px 12px`,
})

const Btm = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: data.currentVariant === 'ScreenMobile' ? `0px` : `0px 0px 6px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin:
    data.currentVariant === 'ScreenMobile'
      ? `20px 0px 0px 0px`
      : `30px 0px 0px 0px`,
  overflow: `hidden`,
}))

const Line = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Other']['Divider'],
  alignSelf: `stretch`,
  height: `1px`,
  margin: `0px`,
}))

const Container = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-end`,
  alignItems: `center`,
  padding:
    data.currentVariant === 'ScreenTablet'
      ? `0px 40px`
      : data.currentVariant === 'ScreenMobile'
      ? `0px 20px`
      : `0px 100px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `15px 0px 0px 0px`,
  overflow: `hidden`,
}))

const FooterTxt2 = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: data.currentVariant === 'ScreenMobile' ? `column` : `row`,
  justifyContent:
    data.currentVariant === 'ScreenMobile' ? `flex-start` : `space-between`,
  alignItems: data.currentVariant === 'ScreenMobile' ? `flex-start` : `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
  overflow: `hidden`,
}))

const Copyright = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Body 3'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 3'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 3'].fontWeight,
  fontSize: theme.typography['Typography']['Body 3'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 3'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 3'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 3'].textDecoration,
  textTransform: theme.typography['Typography']['Body 3'].textTransform,
  margin: `0px`,
}))

const Terms = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: data.currentVariant === 'ScreenMobile' ? `10px 0px` : `10px`,
  boxSizing: `border-box`,
  margin: data.currentVariant === 'ScreenMobile' ? `5px 0px 0px 0px` : `0px`,
}))

const Link1 = styled(MUILink, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin: `0px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Typography']['Body 2 Link'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 2 Link'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 2 Link'].fontWeight,
  fontSize: theme.typography['Typography']['Body 2 Link'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 2 Link'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 2 Link'].lineHeight,
  textDecoration: `'initial'`,
  textTransform: theme.typography['Typography']['Body 2 Link'].textTransform,
}))

const Link2 = styled(MUILink, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin: `0px 0px 0px 10px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Typography']['Body 2 Link'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 2 Link'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 2 Link'].fontWeight,
  fontSize: theme.typography['Typography']['Body 2 Link'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 2 Link'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 2 Link'].lineHeight,
  textDecoration: `'initial'`,
  textTransform: theme.typography['Typography']['Body 2 Link'].textTransform,
}))

function ShoppingFooter1(props) {
  const { data } = useShoppingFooter1()

  return (
    <Property1Desktop className={props.className} data={data}>
      <Top data={data}>
        <Group6 data={data}>
          <FooterTxt data={data}>
            <SqueezLogo
              src={`assets/images/ShoppingFooter1_Squeez_logo.png`}
              loading="lazy"
              alt={'Squeez logo'}
            />
            <Search data={data}>
              <TextFieldOutlined
                size={'small'}
                disabled={false}
                multiline={false}
                data={data}
              />
              <ButtonContained
                variant="contained"
                size={'medium'}
                color={'primary'}
                disabled={false}
                data={data}
              >
                {'SIGN UP'}
              </ButtonContained>
            </Search>
          </FooterTxt>
        </Group6>
      </Top>
      <Top1 data={data}>
        <Group61 data={data}>
          <FooterTxt1 data={data}>
            <Leftside data={data}>
              <Mission>{`Our Mission`}</Mission>
              <Statement>
                {`Lorem ipsum footer text not to be read but for placement only. FPO text.`}
              </Statement>
              <Btns data={data}>
                <ButtonText
                  variant="text"
                  size={'small'}
                  color={'primary'}
                  disabled={false}
                  data={data}
                >
                  {'HOME'}
                </ButtonText>
                <ButtonText1
                  variant="text"
                  size={'small'}
                  color={'primary'}
                  disabled={false}
                  data={data}
                >
                  {'ABOUT'}
                </ButtonText1>
                <ButtonText2
                  variant="text"
                  size={'small'}
                  color={'primary'}
                  disabled={false}
                  data={data}
                >
                  {'CONTACt'}
                </ButtonText2>
                <ButtonText3
                  variant="text"
                  size={'small'}
                  color={'primary'}
                  disabled={false}
                  data={data}
                >
                  {'TEAM'}
                </ButtonText3>
                <ButtonText4
                  variant="text"
                  size={'small'}
                  color={'primary'}
                  disabled={false}
                  data={data}
                >
                  {'SIGNUP'}
                </ButtonText4>
              </Btns>
            </Leftside>
            <SocialIcons data={data}>
              <Vector
                src={`assets/images/ShoppingFooter1_Vector.png`}
                loading="lazy"
                alt={'Vector'}
              />
              <Vector1
                src={`assets/images/ShoppingFooter1_Vector_1.png`}
                loading="lazy"
                alt={'Vector'}
              />
              <Vector2
                src={`assets/images/ShoppingFooter1_Vector_2.png`}
                loading="lazy"
                alt={'Vector'}
              />
              <Vector3
                src={`assets/images/ShoppingFooter1_Vector_3.png`}
                loading="lazy"
                alt={'Vector'}
              />
            </SocialIcons>
          </FooterTxt1>
        </Group61>
      </Top1>
      <Btm data={data}>
        <Line></Line>
        <Container data={data}>
          <FooterTxt2 data={data}>
            <Copyright>{`© 2023 Your company. All rights reserved.`}</Copyright>
            <Terms data={data}>
              <Link1
                color={'primary'}
                disabled={false}
                underline={'hover'}
                data={data}
              >
                {'TOS'}
              </Link1>
              <Link2
                color={'primary'}
                disabled={false}
                underline={'hover'}
                data={data}
              >
                {'Privacy Policy'}
              </Link2>
            </Terms>
          </FooterTxt2>
        </Container>
      </Btm>
    </Property1Desktop>
  )
}

export default ShoppingFooter1
