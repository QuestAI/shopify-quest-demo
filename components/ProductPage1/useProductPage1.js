/**********************************************************************
 *
 *   Component hook generated by Quest
 *
 *   Code Logic for the component goes in this hook
 *   To setup bindings that use the data here or call the functions here, use the Quest editor
 *   Do not change the name of the hook
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React, { useState } from 'react'
import useProductPage1ResponsiveSize from './useProductPage1ResponsiveSize'
import shopify from '../../services/shopify'
/* These are the possible values for the current variant. Use this to change the currentVariant dynamically.
Please don't modify */
const variantOptions = {
  ScreenDesktop: 'ScreenDesktop',
  ScreenTablet: 'ScreenTablet',
  ScreenMobile: 'ScreenMobile',
}

const useProductPage1 = (id) => {
  const [currentVariant, setCurrentVariant] = React.useState(
    variantOptions['ScreenDesktop']
  )
  const [product, setProduct] = useState()

  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(false)
  const [recommendations, setRecommendations] = useState([])

  const breakpointsVariant = useProductPage1ResponsiveSize()

  React.useEffect(() => {
    if (breakpointsVariant !== currentVariant) {
      setCurrentVariant(breakpointsVariant)
    }
  }, [breakpointsVariant])

  React.useEffect(() => {
    const fetchProducts = async () => {
      try {
        setIsLoading(true)
        const response = await shopify.product.fetch(
          `gid://shopify/Product/${id}`
        )

        if (!response) {
          setError('No product found')
        } else {
          setProduct(JSON.parse(JSON.stringify(response)))
        }
      } catch (error) {
        setError('There was an error')
      } finally {
        setIsLoading(false)
      }
    }

    const fetchRecommendations = async () => {
      const products = await shopify.product.fetchAll()
      const parsedProducts = JSON.parse(JSON.stringify(products))
      const arr = []
      while (arr.length < 3 && parsedProducts?.length > 0) {
        var r = Math.floor(Math.random() * 11) + 1

        if (arr.map((elem) => elem.id).indexOf(parsedProducts[r].id) === -1)
          arr.push(parsedProducts[r])
      }

      setRecommendations(arr)
    }
    if (id) {
      fetchProducts()
      fetchRecommendations()
    }
  }, [id])

  const data = { currentVariant, isLoading, error, product, recommendations }

  const fns = { setCurrentVariant }

  return { data, fns }
}

export default useProductPage1
