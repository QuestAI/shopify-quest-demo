/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react'
import { Divider, TextField } from '@mui/material'
import { styled } from '@mui/material/styles'
// import IconX from 'components/IconX/IconX';
import CartItem1 from 'components/CartItem1/CartItem1'
import ShopBtn1 from 'components/ShopBtn1/ShopBtn1'
import { useCart1 } from './useCart1'
// import PaymentOptions from 'components/PaymentOptions/PaymentOptions';

const TypeQuest = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Background']['Paper'],
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `20px 24px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
}))

const Top = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
})

const Left = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
})

const Cart = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['H5'].fontStyle,
  fontFamily: theme.typography['Typography']['H5'].fontFamily,
  fontWeight: theme.typography['Typography']['H5'].fontWeight,
  fontSize: theme.typography['Typography']['H5'].fontSize,
  letterSpacing: theme.typography['Typography']['H5'].letterSpacing,
  lineHeight: theme.typography['Typography']['H5'].lineHeight,
  textDecoration: theme.typography['Typography']['H5'].textDecoration,
  textTransform: theme.typography['Typography']['H5'].textTransform,
  margin: `0px`,
}))

const Q1Item = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  margin: `0px 0px 0px 14px`,
}))

const Icon1 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `24px`,
  height: `24px`,
  margin: `0px`,
})

// const IconX1 = styled(IconX)(({ theme }) => ({
//   width: `24px`,
//   height: `24px`,
//   position: `absolute`,
//   left: `0px`,
//   top: `0px`,
// }));

const DividerHorizontal = styled(Divider)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
}))

const ScrollArea = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
  overflow: `hidden`,
})

const CartItem11 = styled(CartItem1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}))

const DividerHorizontal1 = styled(Divider)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
}))

const TextFieldOutlined = styled(TextField)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
}))

const DividerHorizontal2 = styled(Divider)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
}))

const Btm = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `20px 0px 0px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `20px 0px 0px 0px`,
})

const Total = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
})

const Subtotal = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  margin: `0px`,
}))

const Q1790 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['H5'].fontStyle,
  fontFamily: theme.typography['Typography']['H5'].fontFamily,
  fontWeight: theme.typography['Typography']['H5'].fontWeight,
  fontSize: theme.typography['Typography']['H5'].fontSize,
  letterSpacing: theme.typography['Typography']['H5'].letterSpacing,
  lineHeight: theme.typography['Typography']['H5'].lineHeight,
  textDecoration: theme.typography['Typography']['H5'].textDecoration,
  textTransform: theme.typography['Typography']['H5'].textTransform,
  margin: `0px`,
}))

const TaxesAndShippingCalc = styled('div')(({ theme }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 3'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 3'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 3'].fontWeight,
  fontSize: theme.typography['Typography']['Body 3'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 3'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 3'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 3'].textDecoration,
  textTransform: theme.typography['Typography']['Body 3'].textTransform,
  alignSelf: `stretch`,
  margin: `14px 0px 0px 0px`,
}))

const ShopBtn11 = styled(ShopBtn1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `14px 0px 0px 0px`,
}))

const Frame1 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `10px 20px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `14px 0px 0px 0px`,
  overflow: `hidden`,
})

// const PaymentOptions1 = styled(PaymentOptions)(({ theme }) => ({
//   width: `48px`,
//   height: `30.67px`,
//   margin: `0px`,
// }));

// const PaymentOptions2 = styled(PaymentOptions)(({ theme }) => ({
//   width: `48px`,
//   height: `30.67px`,
//   margin: `0px 0px 0px 16px`,
// }));

// const PaymentOptions3 = styled(PaymentOptions)(({ theme }) => ({
//   width: `48px`,
//   height: `30.67px`,
//   margin: `0px 0px 0px 16px`,
// }));

// const PaymentOptions4 = styled(PaymentOptions)(({ theme }) => ({
//   width: `48px`,
//   height: `30.67px`,
//   margin: `0px 0px 0px 16px`,
// }));

function Cart1(props) {
  const { fns, data } = useCart1(props)
  return (
    <TypeQuest className={props.className}>
      <Top>
        <Left>
          <Cart>{`Cart`}</Cart>
          <Q1Item>{`(${props?.cart?.length} item${
            props?.cart?.length !== 1 ? 's' : ''
          })`}</Q1Item>
        </Left>
        <Icon1>{/* <IconX1 /> */}</Icon1>
      </Top>
      <DividerHorizontal orientation="horizontal" />
      <ScrollArea>
        {data.groupedCart.map((element) => {
          return (
            <>
              <CartItem11
                title={element.title}
                image={element.images[0].src}
                price={element.variants[0].price.amount}
                quantity={element.quantity}
              />
              <DividerHorizontal1 orientation="horizontal" />
            </>
          )
        })}
      </ScrollArea>
      <TextFieldOutlined
        size={'small'}
        disabled={false}
        multiline={false}
        placeholder="Promo Code"
      />
      <DividerHorizontal2 orientation="horizontal" />
      <Btm>
        <Total>
          <Subtotal>{`Subtotal:`}</Subtotal>
          <Q1790>
            $
            {props.cart
              .reduce((acc, val) => acc + +val.variants[0].price.amount, 0)
              .toFixed(2)}
          </Q1790>
        </Total>
        <TaxesAndShippingCalc>
          {`Taxes and shipping calculated at checkout`}
        </TaxesAndShippingCalc>
        <ShopBtn11 onCart={true} onHandleClick={() => {}} />
        {/* {false && (
          <Frame1>
            <PaymentOptions1 />
            <PaymentOptions2 />
            <PaymentOptions3 />
            <PaymentOptions4 />
          </Frame1>
        )} */}
      </Btm>
    </TypeQuest>
  )
}

export default Cart1
